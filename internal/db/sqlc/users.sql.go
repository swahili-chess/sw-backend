// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users 
    (
     username, 
     full_name,
     lichess_username,
     chesscom_username,
     phone_number,
     photo,
     passcode,
     password_hash, 
     activated,
     enabled
    )
VALUES ($1, $2, $3 ,$4, $5, $6, $7, $8,$9, $10) RETURNING id, phone_number
`

type CreateUserParams struct {
	Username         string `json:"username"`
	FullName         string `json:"full_name"`
	LichessUsername  string `json:"lichess_username"`
	ChesscomUsername string `json:"chesscom_username"`
	PhoneNumber      string `json:"phone_number"`
	Photo            string `json:"photo"`
	Passcode         []byte `json:"passcode"`
	PasswordHash     []byte `json:"password_hash"`
	Activated        bool   `json:"activated"`
	Enabled          bool   `json:"enabled"`
}

type CreateUserRow struct {
	ID          uuid.UUID `json:"id"`
	PhoneNumber string    `json:"phone_number"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.LichessUsername,
		arg.ChesscomUsername,
		arg.PhoneNumber,
		arg.Photo,
		arg.Passcode,
		arg.PasswordHash,
		arg.Activated,
		arg.Enabled,
	)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.PhoneNumber)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, full_name, lichess_username, chesscom_username,
phone_number, photo, passcode, password_hash, enabled, activated, created_at
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID               uuid.UUID `json:"id"`
	Username         string    `json:"username"`
	FullName         string    `json:"full_name"`
	LichessUsername  string    `json:"lichess_username"`
	ChesscomUsername string    `json:"chesscom_username"`
	PhoneNumber      string    `json:"phone_number"`
	Photo            string    `json:"photo"`
	Passcode         []byte    `json:"passcode"`
	PasswordHash     []byte    `json:"password_hash"`
	Enabled          bool      `json:"enabled"`
	Activated        bool      `json:"activated"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.Photo,
		&i.Passcode,
		&i.PasswordHash,
		&i.Enabled,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT users.id, users.username, users.full_name, users.lichess_username, 
users.chesscom_username, users.phone_number,users.photo, users.passcode, users.password_hash, users.activated,users.enabled, users.created_at
FROM users
INNER JOIN token
ON users.id = token.user_id
WHERE token.hash = $1
AND token.scope = $2
AND token.expiry > $3
`

type GetUserByTokenParams struct {
	Hash   []byte    `json:"hash"`
	Scope  string    `json:"scope"`
	Expiry time.Time `json:"expiry"`
}

type GetUserByTokenRow struct {
	ID               uuid.UUID `json:"id"`
	Username         string    `json:"username"`
	FullName         string    `json:"full_name"`
	LichessUsername  string    `json:"lichess_username"`
	ChesscomUsername string    `json:"chesscom_username"`
	PhoneNumber      string    `json:"phone_number"`
	Photo            string    `json:"photo"`
	Passcode         []byte    `json:"passcode"`
	PasswordHash     []byte    `json:"password_hash"`
	Activated        bool      `json:"activated"`
	Enabled          bool      `json:"enabled"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (GetUserByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, arg.Hash, arg.Scope, arg.Expiry)
	var i GetUserByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.Photo,
		&i.Passcode,
		&i.PasswordHash,
		&i.Activated,
		&i.Enabled,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, full_name, lichess_username, chesscom_username,
phone_number, photo, passcode, password_hash, enabled, activated, created_at
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID               uuid.UUID `json:"id"`
	Username         string    `json:"username"`
	FullName         string    `json:"full_name"`
	LichessUsername  string    `json:"lichess_username"`
	ChesscomUsername string    `json:"chesscom_username"`
	PhoneNumber      string    `json:"phone_number"`
	Photo            string    `json:"photo"`
	Passcode         []byte    `json:"passcode"`
	PasswordHash     []byte    `json:"password_hash"`
	Enabled          bool      `json:"enabled"`
	Activated        bool      `json:"activated"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.Photo,
		&i.Passcode,
		&i.PasswordHash,
		&i.Enabled,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsernameOrPhone = `-- name: GetUserByUsernameOrPhone :one
SELECT id, username, full_name, lichess_username, chesscom_username, phone_number, password_hash, passcode, activated, enabled, photo, created_at FROM users 
WHERE 
    (phone_number = $1 OR $1 = '' ) 
    AND 
    (username = $2 OR $2 = '')
`

type GetUserByUsernameOrPhoneParams struct {
	PhoneNumber string `json:"phone_number"`
	Username    string `json:"username"`
}

func (q *Queries) GetUserByUsernameOrPhone(ctx context.Context, arg GetUserByUsernameOrPhoneParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameOrPhone, arg.PhoneNumber, arg.Username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.Passcode,
		&i.Activated,
		&i.Enabled,
		&i.Photo,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForResetOrActivation = `-- name: GetUserForResetOrActivation :one
SELECT id, username, full_name, lichess_username, chesscom_username,
phone_number, photo, passcode, password_hash, enabled, activated, created_at
FROM users
WHERE 
   (phone_number = $1 OR $1 = '' ) 
     AND 
   (username = $2 OR $2 = '') 
     AND
   (passcode = $3)
`

type GetUserForResetOrActivationParams struct {
	PhoneNumber string `json:"phone_number"`
	Username    string `json:"username"`
	Passcode    []byte `json:"passcode"`
}

type GetUserForResetOrActivationRow struct {
	ID               uuid.UUID `json:"id"`
	Username         string    `json:"username"`
	FullName         string    `json:"full_name"`
	LichessUsername  string    `json:"lichess_username"`
	ChesscomUsername string    `json:"chesscom_username"`
	PhoneNumber      string    `json:"phone_number"`
	Photo            string    `json:"photo"`
	Passcode         []byte    `json:"passcode"`
	PasswordHash     []byte    `json:"password_hash"`
	Enabled          bool      `json:"enabled"`
	Activated        bool      `json:"activated"`
	CreatedAt        time.Time `json:"created_at"`
}

func (q *Queries) GetUserForResetOrActivation(ctx context.Context, arg GetUserForResetOrActivationParams) (GetUserForResetOrActivationRow, error) {
	row := q.db.QueryRowContext(ctx, getUserForResetOrActivation, arg.PhoneNumber, arg.Username, arg.Passcode)
	var i GetUserForResetOrActivationRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.Photo,
		&i.Passcode,
		&i.PasswordHash,
		&i.Enabled,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET 
    username = $1, 
    full_name = $2, 
    lichess_username = $3, 
    chesscom_username = $4, 
    phone_number = $5, 
    photo = $6,
    passcode = $7,
    password_hash = $8, 
    activated = $9,
    enabled = $10
WHERE 
    id = $11
`

type UpdateUserByIdParams struct {
	Username         string    `json:"username"`
	FullName         string    `json:"full_name"`
	LichessUsername  string    `json:"lichess_username"`
	ChesscomUsername string    `json:"chesscom_username"`
	PhoneNumber      string    `json:"phone_number"`
	Photo            string    `json:"photo"`
	Passcode         []byte    `json:"passcode"`
	PasswordHash     []byte    `json:"password_hash"`
	Activated        bool      `json:"activated"`
	Enabled          bool      `json:"enabled"`
	ID               uuid.UUID `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Username,
		arg.FullName,
		arg.LichessUsername,
		arg.ChesscomUsername,
		arg.PhoneNumber,
		arg.Photo,
		arg.Passcode,
		arg.PasswordHash,
		arg.Activated,
		arg.Enabled,
		arg.ID,
	)
	return err
}
