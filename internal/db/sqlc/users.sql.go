// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users 
    (
     username, 
     full_name,
     lichess_username,
     chesscom_username,
     phone_number,
     password_hash, 
     activated
    )
VALUES ($1, $2, $3 ,$4, $5, $6, $7)
`

type CreateUserParams struct {
	Username         string         `json:"username"`
	FullName         string         `json:"full_name"`
	LichessUsername  sql.NullString `json:"lichess_username"`
	ChesscomUsername sql.NullString `json:"chesscom_username"`
	PhoneNumber      string         `json:"phone_number"`
	PasswordHash     []byte         `json:"password_hash"`
	Activated        bool           `json:"activated"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.LichessUsername,
		arg.ChesscomUsername,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.Activated,
	)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, username, full_name, lichess_username, chesscom_username,
phone_number, password_hash, activated, created_at
FROM users
WHERE phone_number = $1
`

type GetUserByPhoneRow struct {
	ID               uuid.UUID      `json:"id"`
	Username         string         `json:"username"`
	FullName         string         `json:"full_name"`
	LichessUsername  sql.NullString `json:"lichess_username"`
	ChesscomUsername sql.NullString `json:"chesscom_username"`
	PhoneNumber      string         `json:"phone_number"`
	PasswordHash     []byte         `json:"password_hash"`
	Activated        bool           `json:"activated"`
	CreatedAt        time.Time      `json:"created_at"`
}

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (GetUserByPhoneRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phoneNumber)
	var i GetUserByPhoneRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT users.id, users.username, users.full_name, users.lichess_username, 
users.chesscom_username, users.phone_number, users.password_hash, users.activated, users.created_at
FROM users
INNER JOIN token
ON users.id = token.user_id
WHERE token.hash = $1
AND token.scope = $2
AND token.expiry > $3
`

type GetUserByTokenParams struct {
	Hash   []byte    `json:"hash"`
	Scope  string    `json:"scope"`
	Expiry time.Time `json:"expiry"`
}

type GetUserByTokenRow struct {
	ID               uuid.UUID      `json:"id"`
	Username         string         `json:"username"`
	FullName         string         `json:"full_name"`
	LichessUsername  sql.NullString `json:"lichess_username"`
	ChesscomUsername sql.NullString `json:"chesscom_username"`
	PhoneNumber      string         `json:"phone_number"`
	PasswordHash     []byte         `json:"password_hash"`
	Activated        bool           `json:"activated"`
	CreatedAt        time.Time      `json:"created_at"`
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (GetUserByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, arg.Hash, arg.Scope, arg.Expiry)
	var i GetUserByTokenRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, full_name, lichess_username, chesscom_username,
phone_number, password_hash, activated, created_at
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID               uuid.UUID      `json:"id"`
	Username         string         `json:"username"`
	FullName         string         `json:"full_name"`
	LichessUsername  sql.NullString `json:"lichess_username"`
	ChesscomUsername sql.NullString `json:"chesscom_username"`
	PhoneNumber      string         `json:"phone_number"`
	PasswordHash     []byte         `json:"password_hash"`
	Activated        bool           `json:"activated"`
	CreatedAt        time.Time      `json:"created_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.LichessUsername,
		&i.ChesscomUsername,
		&i.PhoneNumber,
		&i.PasswordHash,
		&i.Activated,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET 
    username = $1, 
    full_name = $2, 
    lichess_username = $3, 
    chesscom_username = $4, 
    phone_number = $5, 
    password_hash = $6, 
    activated = $7
WHERE 
    id = $8
`

type UpdateUserByIdParams struct {
	Username         string         `json:"username"`
	FullName         string         `json:"full_name"`
	LichessUsername  sql.NullString `json:"lichess_username"`
	ChesscomUsername sql.NullString `json:"chesscom_username"`
	PhoneNumber      string         `json:"phone_number"`
	PasswordHash     []byte         `json:"password_hash"`
	Activated        bool           `json:"activated"`
	ID               uuid.UUID      `json:"id"`
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.Username,
		arg.FullName,
		arg.LichessUsername,
		arg.ChesscomUsername,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.Activated,
		arg.ID,
	)
	return err
}
